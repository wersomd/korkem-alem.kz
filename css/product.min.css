.product__items{margin-top:130px;display:grid;grid-template-columns:repeat(3,minmax(250px,1fr));gap:60px 40px}.product__item{margin-bottom:100px}.product__img{background:gray;width:100%;height:300px}.product__img img{height:100%;-o-object-fit:cover;object-fit:cover}.product__text{margin-top:30px}.product__title{font-size:26px;font-weight:700}.product__subtitle{font-size:18px;line-height:36px}.product__info,.product__weight__container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.product__info{margin-top:10px;font-size:16px;padding:10px 0}.product__weight__container{-ms-flex-wrap:wrap;flex-wrap:wrap;row-gap:10px}.product__weight{background:#026839;padding:4px 6px;color:#fff;border-radius:5px;margin-left:6px}@media (max-width:992px){.product__title{font-size:24px}.product__img{height:240px}.product__subtitle{font-size:17px}}@media screen and (max-width:768px){.product__items{grid-template-columns:repeat(2,minmax(40%,1fr))}.product__item{margin-bottom:60px}}@media (max-width:576px){.product__items{grid-template-columns:repeat(2,minmax(35%,1fr));-webkit-column-gap:30px;-moz-column-gap:30px;column-gap:30px}.product__item{margin-bottom:40px}.product__img{height:180px}.product__title{font-size:calc(1vw + 1vh + 1vmin)}.product__subtitle{margin-top:10px;font-size:13px;line-height:1.4}.product__info{font-size:13px}}@media (max-width:380px){.product__img{height:140px}}@media (max-width:325px){.product__items{grid-template-columns:1fr}.product__item{margin-bottom:30px}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */